pki:
  # The CAs that are accepted by this node. Must contain one or more certificates created by 'nebula-cert ca'
  ca: {{ pki.ca }}
  cert: {{ pki.cert }}
  key: {{ pki.key }}
{% if blocklist is defined %}
  blocklist:
  {% for hash in blocklist %}
    - "{{ hash }}"
  {% endfor %}
{% endif %}


static_host_map:
{% for host in lighthouses %}
{% if host.nebula_ip is defined and host.external_addr is defined %}
  "{{ host.nebula_ip }}": ["{{ host.external_addr }}:{{ host.external_port | default("4242") }}"]
{% endif %}
{% endfor %}

lighthouse:
  am_lighthouse: {{ lighthouse.am_lighthouse | default("false") }}
  serve_dns: {{ lighthouse.serve_dns | default("false") }}
  interval: {{ lighthouse.interval | default("60") }}
  hosts:
{% if lighthouse.am_lighthouse is not defined %}
{% for host in lighthouses %}
{% if host.nebula_ip is defined %}
  - "{{ host.nebula_ip }}"
{% endif %}
{% endfor %}
{% endif %}

listen:
  host: {{ listen.host }}
  port: {{ listen.port }}
  batch: {{ listen.batch | default("64") }}
  {% if listen.read_buffer is defined %}read_buffer: {{ listen.read_buffer | default("10485760") }}{% endif %}
  {% if listen.write_buffer is defined %}write_buffer: {{ listen.write_buffer | default("10485760") }}{% endif %}

punchy:
  # Continues to punch inbound/outbound at a regular interval to avoid expiration of firewall nat mappings
  punch: {{ punchy }}

  # respond means that a node you are trying to reach will connect back out to you if your hole punching fails
  # this is extremely useful if one node is behind a difficult nat, such as a symmetric NAT
  # Default is false
  respond: {{ punch_back | default("false") }}

  # delays a punch response for misbehaving NATs, default is 1 second, respond must be true to take effect
  #delay: 1s

{% if cipher is defined %}
cipher: {{ cipher }}
{% endif %}

{% if local_range is defined %}
preferred_ranges: "{{ local_range }}"
{% endif %}

{% if sshd is defined %}
sshd:
  enabled: {{ sshd.enabled | default("false") }}
  listen: {{ sshd.listen | default("127.0.0.1:2222") }}
  # TODO: continue setup of SSHD based connection
  #host_key: ./ssh_host_ed25519_key
  #authorized_users:
    #- user: steeeeve
      # keys can be an array of strings or single string
      #keys:
        #- "ssh public key string"
{% endif %}

{% if relay is defined %}
# EXPERIMENTAL: relay support for networks that can't establish direct connections.
relay:
  # Relays are a list of Nebula IP's that peers can use to relay packets to me.
  # IPs in this list must have am_relay set to true in their configs, otherwise
  # they will reject relay requests.
  {% if relay.relays is defined %}
  relays:
    {% for relay_host in relay.relays %}
    - {{ relay_host }}
    {% endfor %}
  {% endif %}

  # Set am_relay to true to permit other hosts to list my IP in their relays config. Default false.
  am_relay: {{ relay.am_relay | default("false") }}
  # Set use_relays to false to prevent this instance from attempting to establish connections through relays.
  # default true
  use_relays: {{ relay.use_relay | default("true") }}
{% endif %}

# Configure the private interface. Note: addr is baked into the nebula certificate
tun:
  # Name of the device
  dev: {{ tun.dev_name | default("nebula1") }}
  # Toggles forwarding of local broadcast packets, the address of which depends on the ip/mask encoded in pki.cert
  drop_local_broadcast: {{ tun.drop_local_broadcast | default("false") | lower }}
  # Toggles forwarding of multicast packets
  drop_multicast: {{ tun.drop_multicast | default("false") | lower }}
  # Sets the transmit queue length, if you notice lots of transmit drops on the tun it may help to raise this number. Default is 500
  tx_queue: {{ tun.tx_queue | default("500") }}
  # Default MTU for every packet, safe setting is (and the default) 1300 for internet based traffic
  mtu: {{ tun.mtu | default("1300") }}
  # Route based MTU overrides, you have known vpn ip paths that can support larger MTUs you can increase/decrease them here
  routes:
{% if routes is defined %}
{% for route in routes %}
    - route: "{{ route.network }}"
      mtu: {{ route.mtu | default("1300") }}
{% endfor %}
{% endif %}
    #- mtu: 8800
    #  route: 10.0.0.0/16
{% if unsafe_routes is defined %}
  unsafe_routes:
{% for unsafe_route in unsafe_routes %}
    - route: "{{ unsafe_route.network }}"
      via: "{{ unsafe_route.via }}"
      mtu: {{ unsafe_route.mtu | default("1300") }}
{% endfor %}
{% endif %}

# Configure logging level
logging:
  # panic, fatal, error, warning, info, or debug. Default is info
  level: {{ logging.level | default("info") }}
  # json or text formats currently available. Default is text
  format: {{ logging.format | default ("text") }}

{% if stats.enabled %}
stats:
  type: {{ stats.type }}
  listen: {{ stats.listen }}
  path: {{ stats.path }}
  namespace: {{ stats.namespace }}
  subsystem: {{ stats.subsystem }}
  interval: {{ stats.interval }}
{% endif%}

# Nebula security group configuration
firewall:
  conntrack:
    tcp_timeout: 120h
    udp_timeout: 3m
    default_timeout: 10m
    max_connections: 100000

  # The firewall is default deny. There is no way to write a deny rule.
  # Rules are comprised of a protocol, port, and one or more of host, group, or CIDR
  # Logical evaluation is roughly: port AND proto AND ca_sha AND ca_name AND (host OR group OR groups OR cidr)
  # - port: Takes `0` or `any` as any, a single number `80`, a range `200-901`, or `fragment` to match second and further fragments of fragmented packets (since there is no port available).
  #   code: same as port but makes more sense when talking about ICMP, TODO: this is not currently implemented in a way that works, use `any`
  #   proto: `any`, `tcp`, `udp`, or `icmp`
  #   host: `any` or a literal hostname, ie `test-host`
  #   group: `any` or a literal group name, ie `default-group`
  #   groups: Same as group but accepts a list of values. Multiple values are AND'd together and a certificate would have to contain all groups to pass
  #   cidr: a CIDR, `0.0.0.0/0` is any.
  #   ca_name: An issuing CA name
  #   ca_sha: An issuing CA shasum

  outbound:
    # Allow all outbound traffic from this node
{% for rule in outbound %}
    - port: "{{ rule.port }}"
      proto: "{{ rule.proto }}"
      {% if rule.host is defined %}host: "{{ rule.host }}"
      {% elif rule.group is defined %}group: "{{ rule.group }}"
      {% elif rule.groups is defined %}groups:
      {% for group in rule.groups %}
        - {{ group }}
      {% endfor %}
      {% elif rule.cidr is defined %}cidr: {{ rule.cidr }}
      {% else %}
      host: any
      {% endif %}
{% endfor %}


  inbound:
{% for rule in inbound %}
    - port: "{{ rule.port }}"
      proto: "{{ rule.proto }}"
{% if rule.host is defined %}
      host: "{{ rule.host }}"
{% elif rule.group is defined %}
      group: "{{ rule.group }}"
{% elif rule.groups is defined %}
      groups:
{% for group in rule.groups %}
        - {{ group }}
{% endfor %}
{% elif rule.cidr is defined %}cidr: {{ rule.cidr }}
{% else %}
      host: any
{% endif %}
{% endfor %}
